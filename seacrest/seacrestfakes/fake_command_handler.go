// Code generated by counterfeiter. DO NOT EDIT.
package seacrestfakes

import (
	"sync"

	"github.com/agemmell/banking-cqrs-es-go/seacrest"
)

type FakeCommandHandler struct {
	HandleCommandStub        func() error
	handleCommandMutex       sync.RWMutex
	handleCommandArgsForCall []struct {
	}
	handleCommandReturns struct {
		result1 error
	}
	handleCommandReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommandHandler) HandleCommand() error {
	fake.handleCommandMutex.Lock()
	ret, specificReturn := fake.handleCommandReturnsOnCall[len(fake.handleCommandArgsForCall)]
	fake.handleCommandArgsForCall = append(fake.handleCommandArgsForCall, struct {
	}{})
	fake.recordInvocation("HandleCommand", []interface{}{})
	fake.handleCommandMutex.Unlock()
	if fake.HandleCommandStub != nil {
		return fake.HandleCommandStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.handleCommandReturns
	return fakeReturns.result1
}

func (fake *FakeCommandHandler) HandleCommandCallCount() int {
	fake.handleCommandMutex.RLock()
	defer fake.handleCommandMutex.RUnlock()
	return len(fake.handleCommandArgsForCall)
}

func (fake *FakeCommandHandler) HandleCommandCalls(stub func() error) {
	fake.handleCommandMutex.Lock()
	defer fake.handleCommandMutex.Unlock()
	fake.HandleCommandStub = stub
}

func (fake *FakeCommandHandler) HandleCommandReturns(result1 error) {
	fake.handleCommandMutex.Lock()
	defer fake.handleCommandMutex.Unlock()
	fake.HandleCommandStub = nil
	fake.handleCommandReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommandHandler) HandleCommandReturnsOnCall(i int, result1 error) {
	fake.handleCommandMutex.Lock()
	defer fake.handleCommandMutex.Unlock()
	fake.HandleCommandStub = nil
	if fake.handleCommandReturnsOnCall == nil {
		fake.handleCommandReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleCommandReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommandHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleCommandMutex.RLock()
	defer fake.handleCommandMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommandHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ seacrest.CommandHandler = new(FakeCommandHandler)
