// Code generated by counterfeiter. DO NOT EDIT.
package cqrsesfakes

import (
	"sync"

	cqrs_es "github.com/agemmell/banking-cqrs-es-go/cqrs-es"
)

type FakeMessageDescriber struct {
	MessageIDStub        func() string
	messageIDMutex       sync.RWMutex
	messageIDArgsForCall []struct {
	}
	messageIDReturns struct {
		result1 string
	}
	messageIDReturnsOnCall map[int]struct {
		result1 string
	}
	MessageTypeStub        func() string
	messageTypeMutex       sync.RWMutex
	messageTypeArgsForCall []struct {
	}
	messageTypeReturns struct {
		result1 string
	}
	messageTypeReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMessageDescriber) MessageID() string {
	fake.messageIDMutex.Lock()
	ret, specificReturn := fake.messageIDReturnsOnCall[len(fake.messageIDArgsForCall)]
	fake.messageIDArgsForCall = append(fake.messageIDArgsForCall, struct {
	}{})
	fake.recordInvocation("MessageID", []interface{}{})
	fake.messageIDMutex.Unlock()
	if fake.MessageIDStub != nil {
		return fake.MessageIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.messageIDReturns
	return fakeReturns.result1
}

func (fake *FakeMessageDescriber) MessageIDCallCount() int {
	fake.messageIDMutex.RLock()
	defer fake.messageIDMutex.RUnlock()
	return len(fake.messageIDArgsForCall)
}

func (fake *FakeMessageDescriber) MessageIDCalls(stub func() string) {
	fake.messageIDMutex.Lock()
	defer fake.messageIDMutex.Unlock()
	fake.MessageIDStub = stub
}

func (fake *FakeMessageDescriber) MessageIDReturns(result1 string) {
	fake.messageIDMutex.Lock()
	defer fake.messageIDMutex.Unlock()
	fake.MessageIDStub = nil
	fake.messageIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMessageDescriber) MessageIDReturnsOnCall(i int, result1 string) {
	fake.messageIDMutex.Lock()
	defer fake.messageIDMutex.Unlock()
	fake.MessageIDStub = nil
	if fake.messageIDReturnsOnCall == nil {
		fake.messageIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.messageIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMessageDescriber) MessageType() string {
	fake.messageTypeMutex.Lock()
	ret, specificReturn := fake.messageTypeReturnsOnCall[len(fake.messageTypeArgsForCall)]
	fake.messageTypeArgsForCall = append(fake.messageTypeArgsForCall, struct {
	}{})
	fake.recordInvocation("MessageType", []interface{}{})
	fake.messageTypeMutex.Unlock()
	if fake.MessageTypeStub != nil {
		return fake.MessageTypeStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.messageTypeReturns
	return fakeReturns.result1
}

func (fake *FakeMessageDescriber) MessageTypeCallCount() int {
	fake.messageTypeMutex.RLock()
	defer fake.messageTypeMutex.RUnlock()
	return len(fake.messageTypeArgsForCall)
}

func (fake *FakeMessageDescriber) MessageTypeCalls(stub func() string) {
	fake.messageTypeMutex.Lock()
	defer fake.messageTypeMutex.Unlock()
	fake.MessageTypeStub = stub
}

func (fake *FakeMessageDescriber) MessageTypeReturns(result1 string) {
	fake.messageTypeMutex.Lock()
	defer fake.messageTypeMutex.Unlock()
	fake.MessageTypeStub = nil
	fake.messageTypeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMessageDescriber) MessageTypeReturnsOnCall(i int, result1 string) {
	fake.messageTypeMutex.Lock()
	defer fake.messageTypeMutex.Unlock()
	fake.MessageTypeStub = nil
	if fake.messageTypeReturnsOnCall == nil {
		fake.messageTypeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.messageTypeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMessageDescriber) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.messageIDMutex.RLock()
	defer fake.messageIDMutex.RUnlock()
	fake.messageTypeMutex.RLock()
	defer fake.messageTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMessageDescriber) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cqrs_es.MessageDescriber = new(FakeMessageDescriber)
